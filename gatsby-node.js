const path = require("path")

const langs = ["en", "fi"]
const defaultLang = "fi"

// Create pages from Markdown, parse frontmatter from JS pages

exports.createPages = async ({ actions, graphql, reporter }) => {
  const { createPage } = actions
  const res = await graphql(`
    {
      allMdx {
        edges {
          node {
            fields {
              lang
            }
            frontmatter {
              slug
              translation
              template
            }
          }
        }
      }
      allJavascriptFrontmatter {
        edges {
          node {
            fileAbsolutePath
            fields {
              lang
            }
            frontmatter {
              slug
              translation
            }
            node {
              relativeDirectory
            }
          }
        }
      }
    }
  `)

  if (res.errors) {
    reporter.panicOnBuild(`Error while running GraphQL query.`)
    return
  }
  res.data.allMdx.edges.forEach(({ node }) => {
    createPage({
      path: node.frontmatter.slug,
      component: require.resolve(
        `./src/templates/${node.frontmatter.template}.js`
      ),
      context: {
        slug: node.frontmatter.slug,
        lang: node.fields.lang,
        translation: node.frontmatter.translation
      },
    })
  })
  res.data.allJavascriptFrontmatter.edges.forEach(({ node }) => {
    const page = path.basename(node.fileAbsolutePath)
    createPage({
      path: node.frontmatter.slug,
      component: require.resolve(
        `./src/pages/${
          node.node.relativeDirectory ? node.node.relativeDirectory + "/" : ""
        }${page}`
      ),
      context: {
        slug: node.frontmatter.slug,
        lang: node.fields.lang,
        translation: node.frontmatter.translation
      },
    })
  })
}

// Parse lang codes from file names for i18n

exports.onCreateNode = ({ node, actions }) => {
  const { createNodeField } = actions
  // Extract the lang code from file names
  if (
    node.internal.type === `Mdx` ||
    node.internal.type === `JavascriptFrontmatter`
  ) {
    const lang = path.basename(node.fileAbsolutePath).split(".")[1]
    createNodeField({ node, name: `lang`, value: lang })
  }
}

// Handle localized 404 page

exports.onCreatePage = async ({ page, graphql, actions }) => {
  const { createPage, deletePage } = actions

  // Check for localized 404 pages
  if (page.path.match(/404\.[a-z]{2}\/$/)) {
    const oldPage = { ...page }
    // Extract the lang code from path
    const langCode = page.path.split(`.`)[1].replace(/\/$/, "")
    page.matchPath = `/${langCode}/*`
    // Recreate modified pages and assign corresponding paths
    deletePage(oldPage)
    createPage({
      ...page,
      path: langCode === defaultLang ? `/404` : `/${langCode}/404`,
      context: {
        slug: langCode === defaultLang ? `/404` : `/${langCode}/404`,
        lang: `${langCode}`,
      },
    })
  }

  /* Remove remaining static pages autogenerated by Gatsby
     (as Gatsby doesn't understand lang codes in file names) */
  langs.map(lang => {
    const re = new RegExp(`\.${lang}/$`)
    if (page.path.match(re)) deletePage(page)
  })
}

// Define types for MdxFrontmatter (including optional fields)

exports.createSchemaCustomization = ({ actions }) => {
  const { createTypes } = actions
  const typeDefs = `
    type MdxFrontmatter {
      slug: String!
      translation: String
      title: String!
      lead: String
      background: String
      template: String!
    }
  `
  createTypes(typeDefs)
}

/* Ignore CSS ordering warnings, as CSS modules are being used.
   Set alias "@src" for "src" directory. */

exports.onCreateWebpackConfig = ({ stage, getConfig, actions }) => {
  const config = getConfig();
  if (stage === "develop" || stage === "build-javascript") {
    const plugin = config.plugins.find( (el) => el.constructor.name === "MiniCssExtractPlugin" );
    if (plugin) plugin.options.ignoreOrder = true;
  }
  config.resolve.alias["@src"] = path.resolve(__dirname, "src");
  actions.replaceWebpackConfig(config);
}
